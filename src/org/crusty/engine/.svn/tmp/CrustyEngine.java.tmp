
package org.crusty.engine;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.DisplayMode;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.RenderingHints;
import java.awt.Window;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.util.Iterator;
import java.util.PriorityQueue;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 * Instantiate, then call GameLoop();
 * @author Elliot Walmsley
 */
public abstract class CrustyEngine extends Canvas {
	
	/** Random serialVersionUID */
	private static final long serialVersionUID = -264862915258733931L;
	
	/* Various Managers */
	
	/** Particle Manager */
	private ParticleManager pm = new ParticleManager();
	/** Sprite Manager */
	protected SpriteManager sm = new SpriteManager();
	/** Screen Manager */
	public static ScreenManager screenMan = new ScreenManager();
	
	/** All game entities */
	private PriorityQueue<RootEntity> entities;
	
	private DepthComparator depthComparator = new DepthComparator();
	
	public static boolean[] keys;
	
<<<<<<< .mine
	protected float fps;
=======
	public static Font mainFont = new Font("Courier New", Font.BOLD, 24);
	private Font smallFont = new Font("Courier New", Font.BOLD, 12);
>>>>>>> .r8
	
	/* GRAPHICS VARIABLES */
	
	private BufferStrategy strategy;
	private long lastTime;
	private long dt;
	private long accumulator;
	private long deltaTime = 10000000; // 1 / (10 000 000 / 1 000 000 000) = 100 FPS;#
	public static long timePassed = 0;
	private GraphicsConfiguration gc;
	
	public static int width, height;
	private long songStart;
	private long genPurpAccum = 0;
	
	static boolean notifyUpdateScreen = false;
	
	JFrame container;
	
	/**
	 * Crusty Engine
	 * Set currentScreen in constructor
	 * @param width
	 * @param height
	 * @param title
	 */
	public CrustyEngine(int width, int height, String title) {
		this.width = width;
		this.height = height;
		loadImages();
		init(width, height, title);
	}
	
	public void init(int width, int height, String title) {
		
		/* Init Variables */
		
		keys = new boolean[255];
		entities = new PriorityQueue<RootEntity>(10, depthComparator);
		
		/* Set up window */
		
		container = new JFrame(title);
		
		JPanel panel = (JPanel) container.getContentPane();
		panel.setPreferredSize(new Dimension(width, height));
		panel.setLayout(null);
//		setBounds(0, 0, width, height);
		setSize(new Dimension(width, height));
		panel.add(this);
		
		setIgnoreRepaint(true);
		
		container.pack();
//		container.setPreferredSize(new Dimension(width, height));
		container.setResizable(false);
		container.setVisible(true);
		
		container.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});
		
		addKeyListener(new KeyInputHandler());
		
		requestFocus();
		
		/* Graphics Setup */
		
		createBufferStrategy(2);
		strategy = getBufferStrategy();
		
		GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
	    GraphicsDevice gd = ge.getDefaultScreenDevice();
	    gc = gd.getDefaultConfiguration();
		
	}
	
//	public void addEntity(RootEntity r, Screen s) {
//		entities.add(r);
//		System.out.println("Added Entity: " + r.toString());
//	}
	
//	public BufferedImage loadImage(String str) {
//		BufferedImage image = null;
//		URL url = this.getClass().getClassLoader().getResource(str);
//		try {
//			image = ImageManager.makeColorTransparent(ImageIO.read(url), Color.RED);
//			return image;
//		} catch (IOException e) {
//			e.printStackTrace();
//			return null;
//		}
//	}
	
	/**
	 * //	String[] images = { "rocket.png",<br>
//	"rocketBottom.png",<br>
//	"rocketCapsule.png",<br>
//	"rocketMiddle.png",<br>
//	"stationalpha.png"};<br>
//  for (String s : images) {<br>
//  	sm.addSprite(s);<br>
//  }
	 */
	public abstract void loadImages();
	
	/** draw */
	public void draw(Graphics2D g) {
		
		screenMan.currentScreen.draw(g);
		
	}
	
	public void gameLoop() {
		
		boolean running = true;
		boolean firstTime = true;
		
//		// Load the tune and play it
//		AudioStream song = null;
//		InputStream in;
//		try {
//			in = new FileInputStream("test.mid");
//			song = new AudioStream(in);
//			AudioPlayer.player.start(song);
//			songStart = System.currentTimeMillis();
//		} catch (FileNotFoundException e) {
//			e.printStackTrace();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
		
		// Create off-screen drawing surface
	    BufferedImage bi = gc.createCompatibleImage(width, height);
	    
	    Graphics2D g = null;
	    Graphics graphics = null;
	    
	    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
	    GraphicsDevice gs = ge.getDefaultScreenDevice();

//	    System.out.println("Fullscreen supported? - " + gs.isFullScreenSupported());
	    
//	    if (gs.isFullScreenSupported()) {
////	    	Frame frame = new Frame(gs.getDefaultConfiguration());
////	    	Window win = new Window(frame);
////	    	win.add(btn, BorderLayout.CENTER);
////	    	try {
////	    	    // Enter full-screen mode
////	    	    gs.setFullScreenWindow(win);
////	    	    win.validate();
////	    	} finally {
////	    	    // Exit full-screen mode
////	    	    gs.setFullScreenWindow(null);
////	    	}
////	    	this.setUndecorated(true);
//	    	
//	    	this.setVisible(true);
//	    	GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().setFullScreenWindow(container);
//
//	    }
		
		while (running) {
			long now = System.nanoTime();
			dt = now - lastTime;
			fps = 1000000000/dt;
			lastTime = now;
			
			accumulator += dt;
			
			if (firstTime) {
				accumulator = 0;
				firstTime = false;
			}
			while (accumulator >= deltaTime) {
				timePassed += deltaTime;
				
				// Some logic
				pm.update(dt);
				Iterator<RootEntity> it = entities.iterator();
				while (it.hasNext()) {
					it.next().logic(dt);
				}
				
				// Logic defined by subclass of engine
				logic(deltaTime);
				
				accumulator -= deltaTime;
			}
			
			g = bi.createGraphics();
			g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
			        RenderingHints.VALUE_ANTIALIAS_ON);
			
			draw(g);
			
			//System.out.println("Frame");
			
//			// Clear
//			g.setColor(Color.BLACK);
//			g.fillRect(0, 0, width, height);
//			
//			 Draw Entities
			Iterator<RootEntity> it = entities.iterator();
			while (it.hasNext()) {
				it.next().draw(g);
			}
//			
//			// Draw particles
//			pm.draw(g);
//			
//			// Draw FPS
//			g.setFont(smallFont);
//			g.setColor(Color.WHITE);
//			g.drawString("FPS: " + fps, 15, 20);
//			
//			// Intro Message
//			
//			if (MessageManager.getNum() == 0) {
//				g.setFont(this.mainFont);
//				g.drawString("The", 200, 100);
//				g.drawString("Adventures", 150, 130);
//				g.drawString("of", 210, 160);
//				g.drawString("ASTROMAN.", 170, 190);
//				g.setFont(Game.smallFont);
//				g.drawString("a 48 hour game.", 50, 300);
//				g.drawString("by Elliot Walmsley", 50, 320);
//				g.drawString("Ludum Dare 19.", 50, 340);
//			}
//			
//			// Draw Message
//			g.setFont(this.mainFont);
//			g.drawString("> " + MessageManager.getMessage(), 20, 50);
//
//			// Song restart
//			if (System.currentTimeMillis() > songStart + 1000 * 70) { // 60 seconds
//				AudioPlayer.player.stop(song);
//				
//				// Reload (only way to loop)
//				try {
//					in = new FileInputStream("test.mid");
//					song = new AudioStream(in);
//				} catch (FileNotFoundException e) {
//					e.printStackTrace();
//				} catch (IOException e) {
//					e.printStackTrace();
//				}
//				
//				AudioPlayer.player.start(song);
//				AudioPlayer.player.start(song);
//				songStart = System.currentTimeMillis();
//				System.out.println("SONG RESTART");
//			}
			
			// Blit image and flip...
			if (!strategy.contentsLost())
				graphics = strategy.getDrawGraphics();
	        graphics.drawImage(bi, 0, 0, null);
			
			if (!strategy.contentsLost())
				strategy.show();
			
			Thread.yield();
	        if (graphics != null) 
	            graphics.dispose();
			if (g != null)
				g.dispose();
		}
		
	}
	
	/** AddAll entities to main entity list */
	public void addEntities(PriorityQueue<RootEntity> entities) {
		this.entities.addAll(entities);
	}
	
	/** RemoveAll entities from main entity list */
	public void removeEntities(PriorityQueue<RootEntity> entities) {
		this.entities.removeAll(entities);
	}
	
	/** Override me and make sure you call super.logic(dt); */
<<<<<<< .mine
	public abstract void logic(long dt);
=======
	public void logic(long dt) {
		
//		if (currentScreen == null) {
//			
//		}
		
		screenMan.currentScreen.logic(dt);
		
		pm.update(dt);
		Iterator<RootEntity> it = entities.iterator();
		while (it.hasNext()) {
			it.next().logic(dt);
		}
	}
>>>>>>> .r8
	
	private class KeyInputHandler extends KeyAdapter {
		public void keyPressed(KeyEvent e) {
			if (e.getKeyCode() < 150) {
				keys[e.getKeyCode()] = true;
			}
		} 

		public void keyReleased(KeyEvent e) {
			if (e.getKeyCode() < 150) {
				keys[e.getKeyCode()] = false;
			}
		}
	}
	
}
